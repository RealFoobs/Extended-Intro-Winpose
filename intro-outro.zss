[function flash(i,j,k,l,m,n)]
	ignorehitpause if time = [$i,$j] {envcolor{value:0,0,0; time:1; under:1;}}
	ignorehitpause if time = [$k,$l] {
		if time % $m < $n {envcolor{value:255,0,0; time:1; under:1;}}
		else {envcolor{value:255,255,255; time:1; under:1;}}
		}

# Helper states start here
#--------------------------------------------------------------------------------------------------------------------------------------------------------
[Statedef 29108180;anim:-2;]
persistent(0) if playerno < 3 {
	if teammode != turns {
	# gives some meter in the subsequent rounds if you win.	
		if map(io_pow_wi) != 0 && map(io_wincount) > 0 {poweradd{value :map(io_pow_wi); redirectid:root,ID;}}
	# gives some meter in the subsequent rounds if you lose.	
		else if map(io_pow_lo) != 0 && map(io_wincount) = 0 {poweradd{value :map(io_pow_lo); redirectid:root,ID;}}
		}
	# gives some meter if the previous teammate was defeated.		
	else if map(io_pow_tm) != 0 && !roundsexisted {poweradd{value :map(io_pow_tm); redirectid:root,ID;}}
	}
if root,ctrl {destroyself{}}

#--------------------------------------------------------------------------------------------------------------------------------------------------------
[Statedef 29108190;anim:-2;]# causes seizures
ignorehitpause if roundstate = 3 {
	if root,map(io_ko_slo) {call flash(0,11,12,59,15,7);}
	else {call flash(0,2,3,14,3,1);}
	}
else {destroyself{}}
	
#--------------------------------------------------------------------------------------------------------------------------------------------------------
[Statedef 29108191;anim:-2;]# allows movement during intros
# emergency killswitch
if root,ctrl || enemy,ctrl || time > 360 {destroyself{}}

# Negative states start here
#--------------------------------------------------------------------------------------------------------------------------------------------------------
[Statedef -2]
	# not for attachedchars 
if playerno < 9 {

	# debug features, may look off because of font differences.
#ignorehitpause {
#	let f = 5;
#	let g = 48;
#	if playerno = 1 {text{removetime:1; layerno:1; pos:$f,$g;text:"Roundstate %d";params:roundstate;}}
#	text{removetime:1; layerno:1; pos:$f,$g+playerno*12;text:"P%v Ctrl = %d   Prev State No  = %i";params:playerno,ctrl,prevstateno;}
#	text{removetime:1; layerno:1; pos:$f+320,$g+playerno*12;text:"State No  = %v";params:stateno;}
#	text{removetime:1; layerno:1; pos:$f+490,$g+playerno*12;text:"Pos = %d,%i ";params:floor(pos x),floor(pos y);}
#	}
	
	# manual turning, taken from 2OS
let x0 = ceil(enemynear((numenemy=2)*(enemynear,stateno=5150)),pos x-pos x)*facing;
ignorehitpause if numhelper(29108191) && ($x0 < -5) && (anim = 0 || anim = 11 || anim = 20) {
	changeanim{value:5+(anim = 11)}
	turn{}
	}
}

[Statedef -3]
	# not for attachedchars 
if playerno < 9 {

	# centers camera on the winner or loser during winposes.
ignorehitpause if roundstate = 4 && !ishelper && playerno < 3 {
	# disables PotS characters' own zoom.
	# this is here partially to teach you how to make your roster a bit more homogeneous with a bit of elbow grease, and partially because PotS himself didn't like the idea of his characters's zoom config clashing with this system.
	if authorname = "Phantom.of.the.Server" && map(cfg_winzoom) {map(cfg_winzoom):= 0;}
	
	# zoom zoom
	if ((map(io_win_cam) = 1 && (winko||wintime)) || (map(io_win_cam) = 2 && (loseko||losetime))) && map(io_win_zoo) > 1 {
		let z = gamewidth/const240p(320/map(io_win_zoo));
		zoom{scale:$z;lag:0.97; pos:(pos x/$z)*camerazoom, pos y; stagebound:1; camerabound:0;}
		}
	}
}
#--------------------------------------------------------------------------------------------------------------------------------------------------------
[Statedef -4]
	# not for attachedchars 
if playerno < 9 {

	# this is only relevant for external detection
if stateno = 5900 && !map(ignore_io) {map(foobs_intro_system):= 1;}

if !ishelper && map(io_pre_fight){
	# spawns a helper that lets the character move during the pre-fight state
	if roundstate = [0,1] && !isasserted(intro) && !numhelper(29108191) {helper{stateno:29108191; ID:29108191; name:"Pre-fight helper"}}
	# prevents the characters from moving and breaking free
	if numhelper(29108191) {
		assertspecial{flag:nointroreset;flag2:nohardcodedkeys;}
		}
	}

if roundstate = [0,1] && playerno < 3 {	
	# mutes the music during round one.
	if map(io_intro_bgm_r1) && roundno = 1 {assertspecial{flag:nomusic;}}
	# mutes the music during intros on turns mode.	test this!
	if map(io_intro_bgm_tm) && roundno > 1 && teammode = turns && !roundsexisted {assertspecial{flag:nomusic;}}
	# hides the lifebars on round one.
	if map(io_intro_hud_r1) && roundno = 1 {assertspecial{flag:nobardisplay;}}
	# hides lifebars on round two onwards.
	if map(io_intro_hud_rx) && roundno > 1 {assertspecial{flag:nobardisplay;}}
	# hides lifebars during intros on turns mode.
	if map(io_intro_hud_tm) && roundno > 1 && teammode = turns && !roundsexisted {assertspecial{flag:nobardisplay;}}
	}

if roundstate = 4 {
	# keeps track of who won and who lost the previous round.
	if alive {map(io_wincount):= 1;}
	else {map(io_wincount):= 0;}
	}

	# gives some meter at the start of round one.
if roundstate = 1 && playerno < 3 && map(io_pow_r1) != 0 && roundno = 1 && power = 0 {powerset{value :map(io_pow_r1);}}

	# spawns a helper to handle meter gain
if roundstate = 1 && playerno < 3 && !numhelper(29108180) && roundno != 1 {helper{stateno:29108180; ID:29108180; extendsmap:1; name:"Meter management helper";}}

ignorehitpause if roundstate = 3 && playerno < 3 && !ishelper && alive {
	# spawns a helper to control the super bg
	if !numhelper(29108190) && ((map(io_ko_spc) && winspecial) || (map(io_ko_sup) && winhyper)) {helper{stateno:29108190; ID:29108190;}}
	# removes the slomo effect on ko.
	ignorehitpause if map(io_ko_slo) {assertspecial{flag:nokoslow;}}
	# mutes the music during kos.
	ignorehitpause if map(io_ko_bgm) {assertspecial{flag:nomusic;}}
	# hides the lifebars during kos.
	ignorehitpause if map(io_ko_hud) {assertspecial{flag:nobardisplay;}}
	}

	# makes intros un-skippable
ignorehitpause if roundstate < 2 && playerno < 3 && map(io_intro_skip) {assertspecial{flag:roundnotskip;}}

ignorehitpause if roundstate = 4 && playerno < 3 && !ishelper && alive {
	# makes winposes un-skippable
	if map(io_win_skip) {assertspecial{flag:roundnotskip;}}
	# mutes the music during winposes.
	ignorehitpause if map(io_win_bgm) {assertspecial{flag:nomusic;}}
	# hides the lifebars during winposes.
	ignorehitpause if map(io_win_hud) {assertspecial{flag:nobardisplay;}}
	}
}