[function faux_control()f]
let f = 0;
if (stateno = 5900 && roundno > 1 && !isasserted(intro)) ||stateno = 29109000 || (stateno = 29109052 && (time = 3 || animtime = 0)) || (stateno = 29109106 && time = 7) {let f = 1;}

[function real_control()]
if !numhelper(29108191) {ctrlset{value:1}}

[function transition(f)]
selfstate{value: $f + numhelper(29108191)*29109000;}


# Custom states start here
#--------------------------------------------------------------------------------------------------------------------------------------------------------
# Custom stand
[StateDef 29109000; type: S; physics: S; anim: 0; sprpriority: 0; ctrl: 0; velset: 0,0;]
if cond(anim = 5, animTime = 0, anim != 0) {changeAnim{value: 0}}
if !alive {selfstate{value: 5050;}}
if !numhelper(29108191) {changestate{value:0;ctrl:1}}

#--------------------------------------------------------------------------------------------------------------------------------------------------------
# Custom stand to Crouch
[StateDef 29109010; type: C; physics: C; anim: 10; ctrl: 0; velset: 0,0;]
if animTime = 0 {call transition(11);}

#--------------------------------------------------------------------------------------------------------------------------------------------------------
# Custom crouching
[StateDef 29109011; type: C; physics: C; anim: 11; sprpriority: 0; ctrl: 0;]
if anim = 6 && animTime = 0 {changeAnim{value: 11}}
if command != "holddown" {call transition(12);}
call real_control();

#--------------------------------------------------------------------------------------------------------------------------------------------------------
# Custom crouch to Stand
[StateDef 29109012; type: S; physics: S; anim: 12; ctrl: 0;]
if animTime = 0 {call transition(0);}

#--------------------------------------------------------------------------------------------------------------------------------------------------------
# Custom walk
[StateDef 29109020; type: S; physics: S; sprpriority: 0; ctrl: 0;]
let walkback = cond(const(velocity.walk.back.x), const(velocity.walk.back.x), const240p(-2.2));
let walkfwd = cond(const(velocity.walk.fwd.x), const(velocity.walk.fwd.x), const240p(2.4));

if command = "holdback" {velSet{x:$walkback}} 
else if command = "holdfwd" || (ailevel && p2bodydist x > const240p(40)) {velSet{x:$walkfwd}}
else if (ailevel && p2bodydist x > const240p(65)) {call transition(100);}
else {call transition(0);}

if vel x > 0 {if cond(anim = 5, animTime = 0, anim != 20) {changeAnim{value: 20;}}}
else if vel x < 0 {if cond(anim = 5, animTime = 0, anim != 21) {changeAnim{value: 21;}}}
call real_control();

#--------------------------------------------------------------------------------------------------------------------------------------------------------
# Custom jump Start
[StateDef 29109040; type: S; physics: S; anim: 40; sprpriority: 1; facep2: 1; ctrl: 0; velset: 0,0;]
let jump = cond(const(velocity.jump.y), const(velocity.jump.y), const240p(-8.4));
let jumpneu = cond(const(velocity.jump.neu.x), const(velocity.jump.neu.x), 0);
let jumprun = cond(const(velocity.runjump.fwd.x), const(velocity.runjump.fwd.x), const240p(4));
let jumpfwd = cond(const(velocity.jump.fwd.x), const(velocity.jump.fwd.x), const240p(2.5));
let jumpback = cond(const(velocity.jump.back.x), const(velocity.jump.back.x), const240p(-2.55));

if time = 0 {map(io_customjump) := 0;}
if command = "holdback" {map(io_customjump) := -1;}
else if command = "holdfwd" {map(io_customjump) := 1;}

if animTime = 0 {
	if map(io_customjump) = 0 {let x = $jumpneu;} 
	else if map(io_customjump) = 1 {
		if prevStateNo = 29109100 {let x = $jumprun;} 
		else {let x = $jumpfwd;}
		}
	else {let x = $jumpback;}
	
	velSet{x: $x; y: $jump}
	call transition(50);
	}

#--------------------------------------------------------------------------------------------------------------------------------------------------------
# Custom jump Up
[StateDef 29109050; type: A; physics: N; ctrl: 0;]#type: A; physics: A 
	# accounts for the change in physics
if time > 0 {gravity{}}
if time = 0 {
	map(io_customjump) := 0;
	changeAnim{value: cond(vel x = 0, 41, ifElse(vel x > 0, 42, 43))}
	}
persistent(0) if vel y > const240p(-2) && selfAnimExist(anim + 3) && anim = [41, 43] {changeAnim{value: anim + 3}}

	# manual landing
if time > 0 && vel y > 0 && pos y >= 0 {selfstate{value:52 + numhelper(29108191)*29109000;}}
call real_control();

#--------------------------------------------------------------------------------------------------------------------------------------------------------
# Custom jump Land
[StateDef 29109052; type: S; physics: S; anim: 47; ctrl:0; velset: 0,0;]
if time = 0 {posSet{y: 0}}
	# manual transition to state 0, and failsafe
if animtime = 0 {call transition(0);}

#--------------------------------------------------------------------------------------------------------------------------------------------------------
# Custom run forward
[StateDef 29109100; type: S; physics: S; anim: cond(animexist(100),100,20); sprpriority: 1; ctrl: 0;]
let runfwd = cond(const(velocity.run.fwd.x) != 0, const(velocity.run.fwd.x), const240p(4.6));

velSet{x: $runfwd}
assertSpecial{flag: noWalk; flag2: nocrouch}
if !ailevel && command != "holdfwd" {call transition(0);}
else if ailevel && abs(p2bodydist x) < 60 {call transition(20);}
call real_control();

#--------------------------------------------------------------------------------------------------------------------------------------------------------
# Custom hop backwards
[StateDef 29109105; type: S; physics: N; anim: cond(animexist(105),105,20); sprpriority: 1; ctrl: 0;]
let runbackx = cond(const(velocity.run.back.x) != 0, const(velocity.run.back.x), const240p(-4.5));

	# accounts for the change in physics
if time > 0 {gravity{}}
if time = 0 {velSet{x:$runbackx; y:const(velocity.run.back.y);}}
	# manual landing
if time > 0 && vel y > 0 && pos y >= 0 {call transition(106);}

#--------------------------------------------------------------------------------------------------------------------------------------------------------
# Custom hop backwards (land)
[StateDef 29109106; type: S; physics: S; anim: 47; ctrl: 0; velset: 0,0;]
if time = 0 {posSet{y: 0}} 
else if time = 2 {makeDust{pos: 0, 0; spacing: 1}}
if animtime = 0 {call transition(0);}

#--------------------------------------------------------------------------------------------------------------------------------------------------------
[Statedef -1]

	# controls state transitions during the pre-fight state
if numhelper(29108191) && !ishelper && map(io_pre_fight) {

	# keeps the character anchored to custom states
	if stateno = 0 {selfstate{value:29109000;}}
	
	# faux-control scenarios
	let f = call faux_control();

	if $f {
	# run forward
		if command = "FF"{selfstate{value:29109100}}
	# dash backwards
		if command = "BB"{selfstate{value:29109105}}
	# walk
		if (command != "holdup" && command != "holddown") && (command = "holdfwd" || command = "holdback") {selfstate{value:29109020}}
		}
	# crouch
	if ($f || stateno = 29109020) && command = "holddown"{selfstate{value:29109010}}	
	# jump
	if ($f || stateno = 29109020 || stateno = 29109100) && command = "holdup"{selfstate{value:29109040}}
	
	# AI commands
	
	let g = abs(p2bodydist x);
	
	if $f && ailevel {
	# run
		if $g > const240p(110) && stateno != 29109100 {selfstate{value:29109100}}
	# walk
		if $g = [const240p(70),const240p(110)] && stateno != 29109020 {selfstate{value:29109020}}
		}
	}
	
